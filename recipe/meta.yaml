{% set name = "clojure" %}
{% set version = "1.11.4.1474" %}

{% set tools_build = version.split('.')[-1] %}
{% set src_version = version.split('.')[:3] | join('.') %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - folder: clojure-tools
    url: https://github.com/clojure/brew-install/releases/download/{{ version }}/clojure-tools-{{ version }}.tar.gz  # [unix]
    sha256: b0d1435efac732b1602eb04799bbf70ca397b8dbbabb53aa72696a64d5ff1008  # [unix]
    url: https://github.com/clojure/brew-install/releases/download/{{ version }}/clojure-tools.zip  # [win]
    sha256: de8b0d00be9e0ffe96e34a0a6503228dccbda6b83d09255e65190a83f11823ea  # [win]
  - folder: clojure-src
    url: https://github.com/clojure/clojure/archive/refs/tags/clojure-{{ src_version }}.tar.gz
    sha256: c2a875549d27c8f0e9d1e7d2f3272c2704500f62de2fb26a99603b0d56989485
  - folder: clojure-tools-src
    url: https://github.com/clojure/brew-install/archive/refs/tags/{{ version }}.tar.gz
    sha256: d31e615b1aa6714b045388937ba0f57cff43d045e525628ec5ac39061b19f525
    patches:
      - patches/unix-local-repository.patch  # [unix]
      - patches/win-local-repository.patch  # [win]

build:
  number: 0
  script_env:
    - PKG_SRC_VERSION={{ src_version }}

requirements:
  build:
    - maven
    - openjdk
  run:
    - openjdk

test:
  files:
    - test_clojure
  commands:
    # Unix installation tests
    - test -f ${PREFIX}/bin/clojure  # [unix]
    - test -f ${PREFIX}/bin/clj  # [unix]
    - test -d ${PREFIX}/lib/clojure  # [unix]
    - test -f ${PREFIX}/lib/clojure/deps.edn  # [unix]
    - test -f ${PREFIX}/lib/clojure/tools.edn  # [unix]
    - test -f ${PREFIX}/lib/clojure/example-deps.edn  # [unix]
    - test -f ${PREFIX}/lib/clojure/libexec/clojure-tools-${PKG_VERSION}.jar  # [unix]
    - test -f ${PREFIX}/lib/clojure/libexec/exec.jar  # [unix]
    - test -f ${PREFIX}/share/man/man1/clojure.1  # [unix]
    - test -f ${PREFIX}/share/man/man1/clj.1  # [unix]
    # Windows installation tests
    - if not exist %PREFIX%\Scripts\clojure.bat exit /b 0  # [win]
    - if not exist %PREFIX%\Scripts\clj.bat exit /b 0  # [win]
    - if not exist %PREFIX%\etc\conda\activate.d\clojure-activate.bat exit /b 0  # [win]
    - if not exist %PREFIX%\etc\conda\activate.d\clojure-activate.ps1 exit /b 0  # [win]
    - if not exist %PREFIX%\etc\conda\deactivate.d\clojure-deactivate.bat exit /b 0  # [win]
    - if not exist %PREFIX%\etc\conda\deactivate.d\clojure-deactivate.ps1 exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools\%PKG_VERSION% exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools\%PKG_VERSION%\ClojureTools.psm1 exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools\%PKG_VERSION%\ClojureTools.psd1 exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools\%PKG_VERSION%\exec.jar exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools\%PKG_VERSION%\clojure-tools-%PKG_VERSION%.jar exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools\%PKG_VERSION%\deps.edn exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools\%PKG_VERSION%\tools.edn exit /b 0  # [win]
    - if not exist %PREFIX%\WindowsPowerShell\Modules\ClojureTools\%PKG_VERSION%\example-deps.edn exit /b 0  # [win]
    - powershell -Command "ClojureTools\clojure --help"  # [win]
    # Functionality tests
    - clojure --help
    - cd test_clojure/adder  # [unix]
    - cd test_clojure\adder  # [win]
    - clojure -M -m core 1 2 3

about:
  home: https://github.com/clojure/clojure
  summary: 'Clojure is a dynamic, general-purpose programming language'
  description: |
    Clojure is a dynamic, general-purpose programming language, combining
    the approachability and interactive development of a scripting language
    with an efficient and robust infrastructure for multithreaded programming.
    Clojure is a compiled language, yet remains completely dynamic â€“ every
    feature supported by Clojure is supported at runtime. Clojure provides
    easy access to the Java frameworks, with optional type hints and type inference,
    to ensure that calls to Java can avoid reflection.
  license: EPL-1.0
  license_file:
    - epl-v10.html
    - THIRD-PARTY.txt
  doc_url: https://clojure.org/

extra:
  recipe-maintainers:
    - MementoRC
